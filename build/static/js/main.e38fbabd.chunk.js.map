{"version":3,"sources":["components/NavBar/NavBar.js","components/BarSort/Bar.js","components/BarSort/BarSort.js","components/PathGrid/Node/Node.jsx","components/pathAlgo/dijkstra.js","components/PathGrid/PathGrid.jsx","components/Controller/Controller.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","Navbar","bg","variant","Brand","Toggle","Collapse","className","Nav","Link","href","NavDropdown","title","id","Item","Bar","props","state","value","barWidth","barMargin","height","Math","round","this","width","margin","style","React","Component","BarSort","inputQty","createRef","count","max","values","active","barCount","current","setState","valList","i","push","floor","random","barList","map","val","Card","Body","Form","Group","controlId","Label","Control","ref","type","min","step","Button","onClick","generateBars","bind","Node","col","isFinish","isStart","isVisited","row","extraClassName","dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","nodes","node","getAllNodes","length","sortNodesByDistance","closestNode","shift","Infinity","updateUnvisitedNeighbors","sort","nodeA","nodeB","unvisitedNeighbors","neighbors","filter","neighbor","getUnvisitedNeighbors","previousNode","PathGrid","getStartGrid","setTimeout","newGrid","slice","newNode","console","log","animateAlgo","clearGrid","visualize","clear","justifyContent","alignContent","rowIdx","key","nodeIdx","createNode","currentRow","Controller","mode","ToggleButtonGroup","name","ToggleButton","setPath","setSort","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e38fbabd.chunk.js","sourcesContent":["import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { NavDropdown, Navbar, Nav } from 'react-bootstrap';\r\n\r\n\r\n\r\nconst NavBar = () => {\r\n    return (\r\n        <Navbar bg=\"primary\" variant=\"dark\">\r\n            <Navbar.Brand>Algo-Easy</Navbar.Brand>\r\n            <Navbar.Toggle />\r\n            <Navbar.Collapse className=\"justify-content-end\">\r\n                <Nav>\r\n                    <Nav.Link href=\"/\">Place Start !</Nav.Link>\r\n                    <Nav.Link href=\"/\">Place Target !</Nav.Link>\r\n                    <NavDropdown title=\"Path Finding Algorithms\" id=\"basic-nav-dropdown\">\r\n                        <NavDropdown.Item href=\"/PathGrid/PathGrid\">Algo1</NavDropdown.Item>\r\n                        <NavDropdown.Item href=\"/\">Algo2</NavDropdown.Item>\r\n                        <NavDropdown.Item href=\"/\">Algo3</NavDropdown.Item>\r\n                        <NavDropdown.Item href=\"/\">Algo4</NavDropdown.Item>\r\n                        <NavDropdown.Item href=\"/\">Algo5</NavDropdown.Item>\r\n                    </NavDropdown>\r\n                    <NavDropdown title=\"Sorting Algorithms\" id=\"basic-nav-dropdown\">\r\n                        <NavDropdown.Item href=\"/\">Algo1</NavDropdown.Item>\r\n                        <NavDropdown.Item href=\"/\">Algo2</NavDropdown.Item>\r\n                        <NavDropdown.Item href=\"/\">Algo3</NavDropdown.Item>\r\n                        <NavDropdown.Item href=\"/\">Algo4</NavDropdown.Item>\r\n                        <NavDropdown.Item href=\"/\">Algo5</NavDropdown.Item>\r\n                    </NavDropdown>\r\n                </Nav>\r\n            </Navbar.Collapse>\r\n        </Navbar>\r\n    );\r\n}\r\n\r\nexport default NavBar","import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport '../BarSort/BarSort.css'\r\n//import { NavDropdown, Navbar, Nav } from 'react-bootstrap';\r\n\r\n\r\n\r\nclass Bar extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            value: props.value,\r\n            barWidth: props.barWidth,\r\n            barMargin: props.barMargin\r\n        }\r\n    }\r\n    render(){\r\n        const height = {\r\n            height: Math.round(this.state.value/10) + '%',\r\n            width: this.state.barWidth +'%',\r\n            margin: this.state.barMargin + '%'\r\n        }\r\n        return (\r\n            <div className='bar' style={height}>\r\n                <p className='barText'>\r\n                {this.state.value}\r\n                </p>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n\r\n    \r\n      \r\n}\r\n\r\nexport default Bar;","import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Bar from '../BarSort/Bar';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nclass BarSort extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            inputQty: React.createRef(),\r\n            count: 0,\r\n            max: props.max,\r\n            values: [],\r\n            active: false\r\n        }\r\n\r\n    }\r\n    generateBars(){\r\n        const barCount = this.state.inputQty.current.value;\r\n        this.setState({\r\n            values: [],\r\n            active: true,\r\n            count: 0\r\n        })\r\n        var valList = [];\r\n        for (let i=0; i<barCount;i++){\r\n            valList.push(Math.floor(Math.random() * Math.floor(this.state.max)));\r\n        }\r\n        this.setState({\r\n            values: valList,\r\n            count: barCount\r\n        });\r\n\r\n    }\r\n    render(){\r\n\r\n        var width = 90.0/this.state.count;\r\n        var margin = 5.0/this.state.count;\r\n\r\n        \r\n        const barList = this.state.values.map((val) =>\r\n                    <Bar value={val} barWidth={width} barMargin={margin}/> \r\n                \r\n            \r\n        );\r\n        return (\r\n            <div className=\"sortDiv\">\r\n                <br/>\r\n            <Card>\r\n                <Card.Body>\r\n                    <Form>\r\n                        <Form.Group controlId=\"barQty\">\r\n                            <Form.Label>How many Bars</Form.Label>\r\n                            <div className=\"controlArea\">\r\n                                <p className=\"rangeText\">5</p>                            \r\n                                <Form.Control ref={this.state.inputQty} className=\"rangeControl\"type=\"range\" min=\"5\" max=\"100\" step=\"1\"/>                            \r\n                                <p className=\"rangeText\">100</p> \r\n                                <Button className=\"rangeText\" onClick={this.generateBars.bind(this)}>Generate List</Button>\r\n                            </div>                            \r\n                            \r\n                            \r\n                            \r\n                        </Form.Group>\r\n                    </Form>\r\n\r\n\r\n                </Card.Body>\r\n            </Card>\r\n            <br></br>\r\n            <Card>\r\n                <Card.Body className='containingCard'>\r\n                <div className='barContainer'>\r\n                        {barList}\r\n                    </div>\r\n                </Card.Body>\r\n               \r\n                \r\n            </Card>\r\n            </div>\r\n            \r\n        )\r\n    }\r\n}\r\n\r\nexport default BarSort;","import React, { Component } from 'react';\r\n\r\nimport './Node.css';\r\n\r\nexport default class Node extends Component {\r\n  render() {\r\n    const {\r\n      col,\r\n      isFinish,\r\n      isStart,\r\n      isVisited,\r\n      row,\r\n      // distance,\r\n      // onMouseDown,\r\n      // onMouseEnter,\r\n      // onMouseUp,\r\n    } = this.props;\r\n    const extraClassName = isFinish\r\n      ? 'finish-node'\r\n      : isStart\r\n        ? 'start-node'\r\n        : isVisited ? 'visited-node' :\r\n          '';\r\n\r\n    return (\r\n      <div\r\n        id={`node-${row}-${col}`}\r\n        className={`node ${extraClassName}`}\r\n      // onMouseDown={() => onMouseDown(row, col)}\r\n      // onMouseEnter={() => onMouseEnter(row, col)}\r\n      // onMouseUp={() => onMouseUp()}\r\n      >\r\n      </ div>\r\n    );\r\n  }\r\n}","export default function dijkstra(grid, startNode, finishNode) {\r\n    const visitedNodesInOrder = [];\r\n    startNode.distance = 0;\r\n    const unvisitedNodes = getAllNodes(grid);\r\n    while (!!unvisitedNodes.length) {\r\n        sortNodesByDistance(unvisitedNodes);\r\n        const closestNode = unvisitedNodes.shift();\r\n        if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n        closestNode.isVisited = true;\r\n        visitedNodesInOrder.push(closestNode);\r\n        if (closestNode === finishNode) return visitedNodesInOrder;\r\n        updateUnvisitedNeighbors(closestNode, grid);\r\n    }\r\n}\r\n\r\nfunction sortNodesByDistance(unvisitedNodes) {\r\n    unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(node, grid) {\r\n    const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n    for (const neighbor of unvisitedNeighbors) {\r\n        neighbor.distance = node.distance + 1;\r\n        neighbor.previousNode = node;\r\n    }\r\n}\r\n\r\nfunction getUnvisitedNeighbors(node, grid) {\r\n    const neighbors = [];\r\n    const { col, row } = node;\r\n    if (row > 0) neighbors.push(grid[row - 1][col]);\r\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n    if (col > 0) neighbors.push(grid[row][col - 1]);\r\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n    return neighbors.filter(neighbor => !neighbor.isVisited);\r\n}\r\n\r\nfunction getAllNodes(grid) {\r\n    const nodes = [];\r\n    for (const row of grid) {\r\n        for (const node of row) {\r\n            nodes.push(node);\r\n        }\r\n    }\r\n    return nodes;\r\n}\r\n\r\n\r\nexport function getNodesInShortestPathOrder(finishNode) {\r\n    const nodesInShortestPathOrder = [];\r\n    let currentNode = finishNode;\r\n    while (currentNode !== null) {\r\n        nodesInShortestPathOrder.unshift(currentNode);\r\n        currentNode = currentNode.previousNode;\r\n    }\r\n    return nodesInShortestPathOrder;\r\n}\r\n\r\n","import React, { Component } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Node from './Node/Node'\r\nimport './PathGrid.css';\r\nimport dijkstra from '../pathAlgo/dijkstra';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\n\r\nconst START_NODE_ROW = 10;\r\nconst START_NODE_COL = 10;\r\nconst FINISH_NODE_ROW = 10;\r\nconst FINISH_NODE_COL = 40;\r\n\r\nexport default class PathGrid extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      grid: [],\r\n      //onMousePressed: false,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const grid = getStartGrid();\r\n    this.setState({ grid });\r\n  }\r\n\r\n\r\n  animateAlgo(visitedNodesInOrder) {\r\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n        const newGrid = this.state.grid.slice();\r\n        const newNode = {\r\n          ...node,\r\n          isVisited: true,\r\n        };\r\n        newGrid[node.row][node.col] = newNode;\r\n        this.setState({ grid: newGrid });\r\n      }, 40 * i);\r\n    }\r\n  }\r\n\r\n\r\n  visualize() {\r\n    // grid, startnode, finishnode \r\n    const { grid } = this.state;\r\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n    //call the dikes algorithm \r\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\r\n    console.log(visitedNodesInOrder);\r\n    this.animateAlgo(visitedNodesInOrder);\r\n  }\r\n\r\n  clear() {\r\n    const clearGrid = getStartGrid();\r\n    this.setState({ grid: clearGrid });\r\n  }\r\n\r\n  render() {\r\n    const { grid,\r\n      //onMousePressed \r\n    } = this.state;\r\n\r\n    return (\r\n      <>\r\n        <center>\r\n          <Button className=\"gridControls\" onClick={() => { this.visualize() }}>\r\n            Visualize\r\n          </Button>\r\n          <Button className=\"gridControls\" onClick={() => { this.clear() }} variant=\"secondary\">\r\n            Clear\r\n          </Button>\r\n          <div className=\"grid\" style={{ justifyContent: 'center', alignContent: 'center' }}>\r\n            {grid.map((row, rowIdx) => {\r\n              return (\r\n                <div key={rowIdx}>\r\n                  {row.map((node, nodeIdx) => {\r\n                    const {\r\n                      // row, \r\n                      // col, \r\n                      isFinish, isStart, isVisited\r\n                      //isWall \r\n                    } = node;\r\n                    return (\r\n                      <Node\r\n                        key={nodeIdx}\r\n                        // col={col}\r\n                        // row={row}\r\n                        isFinish={isFinish}\r\n                        isStart={isStart}\r\n                        isVisited={isVisited}\r\n                      // isWall={isWall}\r\n                      // onMousePressed={onMousePressed}\r\n                      // onMouseDown={(row, col) => ({})\r\n                      //   // this.handleMouseDown(row, col)\r\n                      // }\r\n                      // onMouseEnter={(row, col) => ({})\r\n                      //   //  this.handleMouseEnter(row, col)\r\n                      // }\r\n                      // onMouseUp={() => ({})\r\n                      //   // this.handleMouseUp()\r\n                      // }\r\n                      >\r\n                      </Node>\r\n                    );\r\n                  })}\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        </center>\r\n      </>\r\n    );\r\n\r\n  }\r\n}\r\n\r\nconst createNode = (col, row) => {\r\n  return {\r\n    col,\r\n    row,\r\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\r\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\r\n    distance: Infinity\r\n  };\r\n};\r\n\r\nconst getStartGrid = () => {\r\n  const grid = [];\r\n  for (let row = 0; row < 20; row++) {\r\n    const currentRow = [];\r\n    for (let col = 0; col < 50; col++) {\r\n      currentRow.push(createNode(col, row));\r\n    }\r\n    grid.push(currentRow);\r\n  }\r\n  return grid;\r\n}; \r\n","import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport BarSort from '../BarSort/BarSort';\r\nimport PathGrid from '../PathGrid/PathGrid';\r\nimport ToggleButton from 'react-bootstrap/ToggleButton';\r\nimport ToggleButtonGroup from 'react-bootstrap/ToggleButtonGroup';\r\nclass Controller extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            active: false\r\n        }\r\n\r\n    }\r\n    setPath() {\r\n        this.setState({\r\n            mode: \"path\",\r\n            active: true\r\n        });\r\n    }\r\n    setSort(){\r\n        this.setState({\r\n            mode: \"sort\",\r\n            active: true\r\n        });\r\n    }\r\n\r\n    render () {\r\n\r\n        if (this.state.active ===false) {\r\n            return (\r\n                <div className=\"toggleArea\">\r\n                    <br/>\r\n                    <ToggleButtonGroup type=\"radio\" name=\"mode\" >\r\n                        <ToggleButton value=\"path\" onClick={this.setPath.bind(this)}>Path-Finding</ToggleButton>\r\n                        <ToggleButton value=\"sort\" onClick={this.setSort.bind(this)}>Sorting</ToggleButton>\r\n                    </ToggleButtonGroup>\r\n               \r\n                </div>\r\n                \r\n            );\r\n        }\r\n        else {\r\n            if (this.state.mode === 'path') {\r\n                return (\r\n                    <div>\r\n                        <div className=\"toggleArea\">\r\n                        <br/>\r\n                        <ToggleButtonGroup type=\"radio\" name=\"mode\">\r\n                            <ToggleButton value=\"path\" onClick={this.setPath.bind(this)}>Path-Finding</ToggleButton>\r\n                            <ToggleButton value=\"sort\" onClick={this.setSort.bind(this)}>Sorting</ToggleButton>\r\n                        </ToggleButtonGroup>\r\n                    \r\n                        </div>\r\n                        <br/>\r\n                        <PathGrid/>\r\n                    </div>\r\n                    \r\n                );\r\n            }\r\n            else {\r\n                return (\r\n                    <div>\r\n                        <div className=\"toggleArea\">\r\n                            <br/>\r\n                            <ToggleButtonGroup type=\"radio\" name=\"mode\">\r\n                                <ToggleButton value=\"path\" onClick={this.setPath.bind(this)}>Path-Finding</ToggleButton>\r\n                                <ToggleButton value=\"sort\" onClick={this.setSort.bind(this)}>Sorting</ToggleButton>\r\n                            </ToggleButtonGroup>\r\n                            \r\n                        </div>\r\n                        <br/>\r\n                        <BarSort max={1000}/>\r\n\r\n                    </div>\r\n                    \r\n                );\r\n            }\r\n            }\r\n\r\n\r\n        }\r\n\r\n        \r\n    }\r\n\r\n\r\nexport default Controller;","import React from 'react';\r\nimport './App.css';\r\nimport NavBar from './components/NavBar/NavBar';\r\nimport Controller from './components/Controller/Controller'\r\n\r\nimport BarSort from './components/BarSort/BarSort'\r\n\r\nconst App = () => [\r\n  <div>\r\n    <NavBar />\r\n  </div>,\r\n  <div className='outerContainer'>\r\n    <Controller/>\r\n  </div>\r\n]\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}